
####Code doesn't show flag emoji but can take any other route####

#include <WiFi.h>
#include <HTTPClient.h>

// Wi-Fi credentials
const char* ssid = "iot";
const char* password = "defenestrated75fakers";

// Server details
const char* serverAddress = "3.250.38.184"; // IP address
const int serverPort = 8000;               // Port

// Route and position variables
int positions[10]; // Array to store route positions
int routeLength = 0; // Number of positions in the route
int currentPositionIndex = 0; // Start from the first position

// Timer variables
unsigned long lastTime = 0;
unsigned long timerDelay = 5000; // Send updates every 5 seconds

// Function to fetch the route from the server
String getRouteFromServer(String teamId) {
  WiFiClient client;

  if (client.connect(serverAddress, serverPort)) {
    Serial.println("Connected to server for GET request");

    // Construct the GET request
    String endpoint = "/api/getRoute/" + teamId;
    client.println("GET " + endpoint + " HTTP/1.1");
    client.println("Host: " + String(serverAddress));
    client.println("Connection: close");
    client.println();

    // Read the response
    String response = "";
    while (client.connected() || client.available()) {
      String line = client.readStringUntil('\n');
      response += line;
    }

    client.stop(); // Close the connection

    Serial.println("Server response:");
    Serial.println(response);

    // Extract the body (assume route is in plain text, e.g., "0,1,2,3,4,5")
    int bodyIndex = response.indexOf("\r\n\r\n");
    if (bodyIndex != -1) {
      String route = response.substring(bodyIndex + 4).trim();
      return route; // Return the extracted route
    }
  } else {
    Serial.println("Failed to connect to server for GET request");
  }

  return ""; // Return an empty string if the request fails
}

// Function to send a POST request with the current position
void sendPostRequest(String teamId, int position) {
  WiFiClient client;

  if (client.connect(serverAddress, serverPort)) {
    Serial.println("Connected to server for POST request");

    // Construct the POST body
    String endpoint = "/api/arrived/" + teamId;
    String postBody = "position=" + String(position);

    // Send the POST request
    client.println("POST " + endpoint + " HTTP/1.1");
    client.println("Host: " + String(serverAddress));
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(postBody.length());
    client.println("Connection: close");
    client.println();
    client.println(postBody);

    // Read the server's response
    Serial.println("Server response:");
    while (client.connected() || client.available()) {
      String line = client.readStringUntil('\n');
      Serial.println(line);
    }

    client.stop(); // Close the connection
  } else {
    Serial.println("Failed to connect to server for POST request");
  }
}

// Setup function
void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");

  // Retrieve the route from the server
  String teamId = "pllk3327"; // Replace with your team ID
  String route = getRouteFromServer(teamId);
  if (route.length() > 0) {
    Serial.println("Route received: " + route);

    // Parse the route into an array
    int index = 0;
    while (route.indexOf(',') != -1) {
      positions[index++] = route.substring(0, route.indexOf(',')).toInt();
      route = route.substring(route.indexOf(',') + 1);
    }
    positions[index++] = route.toInt(); // Add the last position
    routeLength = index;               // Store the total length of the route
  } else {
    Serial.println("Failed to retrieve route from server");
  }
}

// Loop function
void loop() {
  // Timer-based updates
  if ((millis() - lastTime) > timerDelay) {
    // Send the current position to the server
    sendPostRequest("pllk3327", positions[currentPositionIndex]);

    // Move to the next position
    currentPositionIndex = (currentPositionIndex + 1) % routeLength;

    // Update the timer
    lastTime = millis();
  }
}
