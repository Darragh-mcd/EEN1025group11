//-------------------------------------------
#include <WiFi.h>

//---------------------------------------------- Macros for using Switch cases


const int Motor1_Pwm = 37;
const int Motor1_Ph = 38;
const int Motor2_Pwm = 39;
const int Motor2_Ph = 20;
const int brownsensor = 4;
const int redsensor = 5;
const int orangesensor = 6;
const int yellowsensor = 7;
const int greensensor = 15;
const int parkingsensor = 16;


//--------------------------------------------------- pins


int rightmost_sensor = 0;
int left_sensor = 0;
int middle_sensor = 0;
int right_sensor = 0;
int Leftmost_sensor = 0;
int Parking_val = 0;
int sensor_sum = 0;
//--------------------------------------------------- sensor vals


const int default_speed = 225;
const int turning_speed = default_speed+25;
const int turning_tight_speed = 255;
const int white_thresh = 1000;
const int Obstacle_thresh = 3500; // threshold for in parking level rmps up fairly quick
int Parking_Thresh = 2500;
int  consecutiveReadings = 0;
int  consecutiveReadings2 = 0;
int i = 0; // used to grab directions from array
//int stage = 0; // used for hard coded path testing
//------------------------------------------------------ needed for logic checks

const int MAX = 8;
const int INF = 9999;
int nodeblocked = 0;
//L F R 180 L F 180 F Park
//int hard_code_route[] = {LEFT,FORWARD,RIGHT,TURN_AROUND,LEFT,FORWARD,TURN_AROUND,FORWARD,PARK};
//-------------------------------------------------------------------------------------------- this is a hardcoded test route
//For Dijkstras 
int graph[MAX][MAX] = {
    { 0, INF, INF, INF, 2, INF, INF, 2 },    
    { INF, 0, INF, INF, INF, INF, 1, 2 },    
    { INF, INF, 0, 2, INF, INF, INF, 2 },    
    { INF, INF, 2, 0, INF, INF, 3, INF },    
    { 2, INF, INF, INF, 0, INF, 3, INF },    
    { INF, INF, INF, INF, INF, INF, 3, INF },  
    { INF, 1, INF, 3, 3, 3, 0, INF },      
    { 2, 2, 2, INF, INF, INF, INF, 0 }      
};
int externalsave[MAX][MAX] = {
    { 0, INF, INF, INF, 2, INF, INF, 2 },    
    { INF, 0, INF, INF, INF, INF, 1, 2 },    
    { INF, INF, 0, 2, INF, INF, INF, 2 },    
    { INF, INF, 2, 0, INF, INF, 3, INF },    
    { 2, INF, INF, INF, 0, INF, 3, INF },    
    { INF, INF, INF, INF, INF, INF, 3, INF },  
    { INF, 1, INF, 3, 3, 3, 0, INF },      
    { 2, 2, 2, INF, INF, INF, INF, 0 }      
};

    //int start = 0; // Starting node
    //int end = 1;   // Destination node
    //int pathLength;
int stage = 1;
//int directionofcar = 1; // 1 is east, -1 is west
int currentPathIndex = 0; // Index in the current path
//int path[MAX]; // Holds the path nodes

//dynamic movement
typedef enum { NORTH = 0, EAST = 90, SOUTH = 180, WEST = 270 } Orientation;
Orientation CurrentOrientation = WEST; //Start coming from the west going to east
//BROYG
    int hardcodedPath[10] = {};
    int numHardcoded = sizeof(hardcodedPath) / sizeof(hardcodedPath[0]);
int fullPath[MAX * MAX];
int fullPathSize = 0;

// WiFi credentials
const char* ssid = "iot";
const char* password = "hoidenish91dippier";

WiFiClient client;
unsigned long previousMillis = 0;
const long interval = 5000; // Non-blocking delay for WiFi checks

// Server details
char server[] = "3.250.38.184";
int port = 8000;

int position = 0; // Current position
float destination; // Next destination from server
bool destinationReached = false; // Flag to track destination completion

// Global variables
unsigned long lastUploadTime = 0; // Tracks the last time the position was uploaded
const long uploadInterval = 5000; // 5-second interval for uploading position
String postBody;

// Function prototypes
void connectToWiFi();
void checkWiFi();
bool connectToServer();
void uploadPosition();
void fetchFullRoute();
float getDestination();
String readResponse();
int getStatusCode(String& response);
String getResponseBody(String& response);
void dijkstra(int graph[MAX][MAX], int start, int end, int path[], int &pathSize);
void constructPath(int parent[], int target, int path[], int &pathSize);
int findMinDistance(int dist[], bool visited[], int n);
void dijkstrasetup();
void printdirectionofcar(int fullPath[], int fullPathSize, int directions[][4], int currentPathIndex);
void printCarMovements(int fullPath[], int fullPathSize, int currentPathIndex, int next, int current, int directions[][4]);
void moveToDestination(float destination);
bool nodeReached();

// Movement functions
void reverse();
void forward();
void left();
void tight_left();
void right();
void tight_right();
void halt();
void perform180();
void perform90R();
void perform90L();
void Park();
void Obstacle_detect();
void check_sensors();
void Adjustment();
void getdirections(int fullPath[], int fullPathSize, int currentPathIndex);

//---------------------------------------------------
// WiFi and server communication functions
void connectToWiFi() {
    Serial.print("Connecting to Network: ");
    Serial.print(ssid);
    Serial.flush();
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        Serial.flush();
        delay(300);
    }
    Serial.println("Connected");
    Serial.print("Obtaining IP address");
    Serial.flush();

    while (WiFi.localIP() == INADDR_NONE) {
        Serial.print(".");
        Serial.flush();
        delay(300);
    }

    Serial.println();
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
}

void checkWiFi() {
    static int retries = 0;
    if (WiFi.status() != WL_CONNECTED && retries < 3) {
        connectToWiFi();
        retries++;
    } else if (retries >= 3) {
        Serial.println("WiFi unreachable. Halting.");
        halt();
    }
}

bool connectToServer() {
    if (!client.connect(server, port)) {
        Serial.println("Error connecting to server");
        return false;
    }
    Serial.println("Connected to server");
    return true;
}

//---------------------------------------------------
// Server communication functions
void updateServer() {
    // Connect to the server
    if (!connectToServer()) {
        Serial.println("Failed to connect to server.");
        return;
    }
    client.connect(server, port);
    // Upload the current position
    uploadPosition();

    // Fetch the next destination
    destination = getDestination();
    if (destination >= 0) {
        Serial.print("Next Destination: ");
        Serial.println(destination);
        moveToDestination(destination);
    } else {
        Serial.println("No more destinations or server error.");
    }

    // Close the connection
    client.stop();
}

void uploadPosition() {
  while(1){
    halt();
    client.connect(server, port);
    // Skip uploading position if the current node is 6 or 7
    if (position == 6 || position == 7) {
        Serial.print("Skipping upload for node: ");
        Serial.println(position);
        Serial.println("Nodes 6 and 7 are not recognized by the server.");
        return; // Exit the function without uploading
    }

    if (!client.connected()) {
        Serial.println("Not connected to server");
        return;
    }

    postBody = "position=" + String(position);
    client.println("POST /api/arrived/pllk3327 HTTP/1.1");
    client.println("Host: 3.250.38.184");
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.print("Content-Length: ");
    client.println(postBody.length()+ 1);
    client.println(); // Blank line to indicate end of headers
    client.print(postBody);

    unsigned long start = millis();
    while (!client.available() && millis() - start < 1000); // Timeout after 1 second

    
        String response = client.readStringUntil('\r');
        Serial.print("Server Response: ");
        Serial.println(response);

        int statusCode = getStatusCode(response);
        if (statusCode == 200) {
            Serial.println("Position uploaded successfully!");
            break;
        } else {
            Serial.print("Failed to upload position. HTTP Error Code: ");
            Serial.println(statusCode);
            Serial.print("Full Response: ");
            Serial.println(response); // Print the full response for debugging
            break;
        
    }}
}
#define MAX_ROUTE_SIZE 10 // Adjust size as needed


void fetchFullRoute() {
    if (connectToServer()) {
        client.println("GET /api/getRoute/pllk3327 HTTP/1.1"); // Replace TEAM-ID
        client.println("Host: 3.250.38.184");
        client.println("Connection: close");
        client.println();

        // Read the response
        String response = readResponse();
        String body = getResponseBody(response);
        Serial.println("Raw Response: " + body);

        // Convert response string to global array
        numHardcoded = parseRoute(body);

        Serial.println("Parsed Route:");
        for (int i = 0; i < numHardcoded; i++) {
            Serial.println(hardcodedPath[i]);
        }
    }
    client.stop();
}

// Function to parse the response into the global array
int parseRoute(String route) {
    route.replace("route: \"", ""); // Remove prefix
    route.replace("\"", "");        // Remove quotes if present

    int index = 0;
    int lastIndex = 0;
    while ((lastIndex = route.indexOf(',')) != -1 && index < MAX_ROUTE_SIZE) {
        hardcodedPath[index++] = route.substring(0, lastIndex).toInt();
        route = route.substring(lastIndex + 1);
    }
    if (index < MAX_ROUTE_SIZE) {
        hardcodedPath[index++] = route.toInt(); // Add last number
    }

    return index; // Return the number of elements stored
}


float getDestination() {
    String response = readResponse();
    if (response.length() == 0) {
        Serial.println("No server response");
        return -1;
    }

    int statusCode = getStatusCode(response);
    if (statusCode == 200) {
        Serial.println("Success! Server accepts message!");
        String body = getResponseBody(response);
        if (body.equalsIgnoreCase("undefined")) {
            return -1; // No more destinations
        }
        return body.toFloat();
    } else {
        Serial.print("HTTP Error Code: ");
        Serial.println(statusCode);
        return -1;
    }
}

String readResponse() {
    char buffer[2048];
    memset(buffer, 0, 2048);
    client.readBytes(buffer, 2048);
    return String(buffer);
}

int getStatusCode(String& response) {
    int split = response.indexOf(" ");
    
    String code = response.substring(split + 1, split + 4); // Extract "200" from "HTTP/1.1 200 OK"
    return code.toInt();
}

String getResponseBody(String& response) {
    int split = response.indexOf("\r\n\r\n");
    String body = response.substring(split + 4, response.length());
    body.trim();
    return body;
}

//BROYG (sensor layout)
        int current ;
        int next ;
        int previous ;
  int node_no = 1;



void setup() {
  Serial.begin(115200);
  pinMode(Motor1_Pwm, OUTPUT);
  pinMode(Motor1_Ph, OUTPUT);
  pinMode(Motor2_Pwm, OUTPUT);
  pinMode(Motor2_Ph, OUTPUT);
  pinMode(redsensor, INPUT);
  pinMode(orangesensor, INPUT);
  pinMode(yellowsensor, INPUT);
  pinMode(brownsensor, INPUT);
  pinMode(greensensor,INPUT);
  pinMode(parkingsensor,INPUT);
  Serial.println("Initializing Wi-Fi...");
    connectToWiFi();
    delay(1000);
    position = 0;
    uploadPosition();
    fetchFullRoute();
  dijkstrasetup();
  for (int i = 0; i < fullPathSize; i++){ Serial.println(fullPath[i]);}
  //dijkstra(graph, start, end, path, &pathLength);
}
void dijkstrasetup(){
      // Reset the fullPathSize to 0
    fullPathSize = 0;

    // Clear the fullPath array (optional, but good practice)
    for (int i = 0; i < MAX * MAX; i++) {
        fullPath[i] = 0; // Reset each element to 0 or any default value
    }

      for (int i = 0; i < numHardcoded - 1; i++) {
        int subPath[MAX];
        int subPathSize = 0;
        if(i == 0){
          dijkstra(graph, current, hardcodedPath[i + 1], subPath, subPathSize);
        }else{dijkstra(graph, hardcodedPath[i], hardcodedPath[i + 1], subPath, subPathSize);}
        if (i > 0) fullPathSize--;
        for (int j = 0; j < subPathSize; j++) {
            fullPath[fullPathSize++] = subPath[j];
            //Serial.println(fullPath[j]);
        }

    }
    currentPathIndex = 0;
}
void loop() {
  if(current == 6 && next == 5){
    Park();
  }
  
  check_sensors();
  Adjustment();
  if(fullPath[currentPathIndex+1] == 5){
    Park();
  }
 /*if(fullPath[currentPathIndex] == 5){
    Park();
  }*/
 checkAndRemoveHardcodedNode(current);// do i need to unblock it? or would it make a difference ?
  //Serial.printf("\n%d Current Path Index is: %d",__LINE__, currentPathIndex);
   if (isNodeBlocked()) {
        //std::cout << "Node " << next << " is blocked. Rerouting..." << std::endl;
        Serial.printf("\n%d Node %d is blocked",__LINE__, next);
        perform180(); // Perform a 180-degree turn
        //CurrentOrientation = static_cast<Orientation>((CurrentOrientation + 180) % 360); // Update orientation
        switchCurrentOrientation();
        /*switch (CurrentOrientation) {
        case NORTH: CurrentOrientation = SOUTH;
        case EAST:  CurrentOrientation = WEST;
        case SOUTH: CurrentOrientation = NORTH;
        case WEST:  CurrentOrientation = EAST;
        // Handle unexpected values*/
    
        Serial.printf("\n%d currentiorientation: %d", __LINE__, CurrentOrientation);
        graph[current][next] = node_no*20; // Mark the edge as blocked in the graph using a some sorts of counter which will take in consideration which node is this
        graph[next][current] = node_no*20;
        dijkstrasetup(); // Recalculate the path
        nodeblocked = 1;
        for (int i = 0; i < fullPathSize; i++) {
            Serial.printf("\n%d path: %d",__LINE__,fullPath[i]);
        }
        node_no++;
        return;
    }//else {retryBlockedNodes();}
  consecutiveReadings = 0;
  consecutiveReadings2 = 0;
  if(fullPath[currentPathIndex+1] == 5){
    Park();
  }
  
  
  }
void switchCurrentOrientation(){
  int directionSS[MAX][4] = {
    //north/west/east/south
    {-1, 4, 7, -1}, // Node 0 
    {-1, 6, 7, -1}, // Node 1 
    {-1, 3, 7, -1}, // Node 2 (7 connects from East) 
    {-1, 6, 2, -1}, // Node 3 (6 connects from West) 
    {-1, 6, 0, -1}, // Node 4 
    {-1, -1, -1, -1}, // Node 5 
    {3, 5, 1, 4}, // Node 6 (4 connects from South, 3 connects from West) 
    {2, 1, -1, 0}  // Node 7 (1 connects from West, 2 connects from East, 0 connects from South)
    };
  if (current == directionSS[next][0] && nodeblocked == 0) {
            CurrentOrientation = SOUTH;
            //perform90L();
            Serial.println("\nSOUTH\n");
            halt();
            delay(1000);
        } else if (current == directionSS[next][1] && nodeblocked == 0) {
            CurrentOrientation = EAST;
            Serial.println("EAST");
            halt();
            delay(1000);
        } else if (current == directionSS[next][2] && nodeblocked == 0) {
          CurrentOrientation = WEST;
            Serial.println("WEST");
            //perform90R();
        } else if (current == directionSS[next][3] && nodeblocked == 0) {
          CurrentOrientation = NORTH;
            Serial.println("NORTH");
}
}
  //look over this function
void retryBlockedNodes() {
    /*for (int i = 0; i < numBlockedNodes; i++) {
        int node = blockedNodes[i];
       */ 
        // Logic to check if the node is now accessible (sensor data, etc.)
        //if (/* Condition to determine node is unblocked */) {
           // Serial.printf("\n%d Node %d is now unblocked", __LINE__, next);
            
            // Restore original graph weight (assuming 3 was original weight)
                if (graph[previous][current] > 4 ) { // change to previous current cause the node is already passed and it will make sense to reset it 
                //Serial.printf("\n%d Node %d is now unblocked", __LINE__, next);
                    graph[previous][current] = externalsave[previous][current]; // Reset to default
                    graph[current][previous] = externalsave[current][previous];
                    Serial.printf("\n%d Node %d is now unblocked", __LINE__, next);
                }
            
            // Remove node from blockedNodes list
           /* for (int j = i; j < numBlockedNodes - 1; j++) {
                blockedNodes[j] = blockedNodes[j + 1];
            }
            numBlockedNodes--;
            */
           // dijkstrasetup(); // Rerun pathfinding after unblocking
             // Exit loop after handling one node
       // }
    }
 void checkAndRemoveHardcodedNode(int current) {
    //for (int i = 0; i < numHardcoded; i++) {// no need for for loop might delete the next nodes if there are duplicates
        if (current == hardcodedPath[0]) {
            //hardcodedCounter++; // Increment counter
            //Serial.printf("Reached hardcoded node %d, counter: %d\n", current, hardcodedCounter);
            
            // Shift elements left to remove the node
            for (int j = i; j < numHardcoded - 1; j++) {
                hardcodedPath[j] = hardcodedPath[j + 1];
            }
            
            numHardcoded--; // Reduce size of hardcodedPath
            //break; // Exit loop after deletion
            Serial.printf("\n%d Node has been removed %d",__LINE__, current);
        }
    //}
}

void Park() {
  const int requiredReadings = 5;    // Number of consecutive readings required

   while(1==1){
  digitalWrite(10,HIGH);  
  Parking_val = analogRead(parkingsensor);
    if (Parking_val >= Parking_Thresh) {
       consecutiveReadings++; // Increment counter for valid readings
       if (consecutiveReadings >= requiredReadings) {
       halt();
       Serial.printf("\n%d Parked",__LINE__);
       //delay(20000);
       break;
        // Stop the robot after consistent readings
    }
  } else{
   // Reset counter if the condition isn't met
      forward();             // Continue moving forward
  }}
}
void Obstacle_detect(){
  const int requiredReadings = 5;    // Number of consecutive readings required
  Parking_val = analogRead(parkingsensor);
  if (Parking_val >= Obstacle_thresh) {
    consecutiveReadings2++; // Increment counter for valid readings
    if (consecutiveReadings2 >= requiredReadings) {
    halt();
    perform180();
    forward();
    }
  } {
   // Reset counter if the condition isn't met
  check_sensors();
  Adjustment();               // Continue moving forward
  }
}
void check_sensors(){
  left_sensor = analogRead(redsensor);
  middle_sensor = analogRead(orangesensor);
  right_sensor = analogRead(yellowsensor);
  Leftmost_sensor = analogRead(brownsensor);
  rightmost_sensor = analogRead(greensensor);
  Parking_val = analogRead(parkingsensor);
  sensor_sum = middle_sensor+Leftmost_sensor+rightmost_sensor+left_sensor+right_sensor;
  }
void Adjustment(){
  if(left_sensor > white_thresh && middle_sensor < white_thresh && right_sensor > white_thresh){
      forward();
     
    }
 
  if((left_sensor <= white_thresh && right_sensor >= white_thresh)&&(middle_sensor >= white_thresh && left_sensor <= white_thresh)){
    left();
   
      }
  if((left_sensor >= white_thresh && right_sensor <= white_thresh)&&(middle_sensor >= white_thresh && right_sensor <= white_thresh)){
    right();
   
  }
   
  if (Leftmost_sensor <= white_thresh && rightmost_sensor >= white_thresh){
     tight_left();
     
  }
  if (Leftmost_sensor >= white_thresh && rightmost_sensor <= white_thresh){
    tight_right();
   
    }
  if((sensor_sum >= 500)&&(sensor_sum <= 5500)){
   
    halt();
    delay(100);
    
    getdirections(fullPath, fullPathSize, currentPathIndex);
    if(current != 6||7){
      //update position
      
    }
    currentPathIndex++;
    forward();
    delay(5);
    }
    
  /*else if (sensor_sum >3500)  {
    reverse();
  }*/
}
void getdirections(int fullPath[], int fullPathSize, int currentPathIndex){
   int directioncoordinates[MAX][4] = {
    //north/west/east/south
    {-1, 4, 7, -1}, // Node 0 
    {-1, 6, 7, -1}, // Node 1 
    {-1, 3, 7, -1}, // Node 2 (7 connects from East) 
    {-1, 6, 2, -1}, // Node 3 (6 connects from West) 
    {-1, 6, 0, -1}, // Node 4 
    {-1, -1, -1, -1}, // Node 5 
    {3, 5, 1, 4}, // Node 6 (4 connects from South, 3 connects from West) 
    {2, 1, -1, 0}  // Node 7 (1 connects from West, 2 connects from East, 0 connects from South)
    };
    printdirectionofcar(fullPath, fullPathSize, directioncoordinates, currentPathIndex);
}
void printdirectionofcar(int fullPath[], int fullPathSize, int directions[MAX][4], int currentPathIndex) {
    if (currentPathIndex < fullPathSize - 1) {
      
        current = fullPath[currentPathIndex];
        next = fullPath[currentPathIndex + 1];
        previous = (currentPathIndex > 0) ? fullPath[currentPathIndex - 1] : INF;
        //previous = fullPath[currentPathIndex -1];


        // Debugging info
        Serial.print("Current node: ");
        Serial.println(current);
        Serial.print("Next node: ");
        Serial.println(next);
       
        Serial.println("At start node");


        if (previous == directions[current][0] && nodeblocked == 0) {
            Serial.println("forward");
            //forward();
            CurrentOrientation = NORTH;
            //perform90L();
                        Serial.println("NORTH");
            halt();
            delay(1000);
        } else if (previous == directions[current][1] && nodeblocked == 0) {

            CurrentOrientation = WEST;
            //perform90L();
            Serial.println("WEST");
            halt();
            delay(1000);
        } else if (previous == directions[current][2] && nodeblocked == 0) {
          CurrentOrientation = EAST;
            Serial.println("EAST");
            //perform90R();
        } else if (previous == directions[current][3] && nodeblocked == 0) {
          CurrentOrientation = SOUTH;
            Serial.println("SOUTH");
            //perform180();
        }// else if (current)
         else {
            nodeblocked = 0;
            Serial.println("Keep Current Direction");
            halt();
            delay(1000);
            //return; // Stop execution to avoid incrementing index incorrectly
        }


        // Increment the path index after a valid move
    printCarMovements(fullPath, fullPathSize, currentPathIndex, previous, next, current, directions);
        //currentPathIndex++;


        // Debugging info for path progression
        Serial.print("Updated currentPathIndex: ");
        Serial.println(currentPathIndex);


    } else {
        Serial.println("Reached final node. Halting.");
        halt();
    }
        // Debugging info for path progression
        Serial.print("Updated currentPathIndex: ");
        Serial.println(currentPathIndex);
}
void printCarMovements(int fullPath[], int fullPathSize, int currentPathIndex,int previous, int next, int current, int directions[MAX][4]){
          // Find the direction of the next node
          int moveDirection = 0;
        for (int j = 0; j < 4; j++) {
            if (directions[current][j] == next) {
                moveDirection = j;
                break;
            }
        }
     switch (CurrentOrientation) {
            case NORTH: printf("North: "); break;
            case EAST: printf("East: "); break;
            case SOUTH: printf("South: "); break;
            case WEST: printf("West: "); break;
        }
       // Determine the movement action
        if (moveDirection == -1) {
        Serial.print("Current node: ");
        Serial.println(current);
        Serial.print("Next node: ");
        Serial.println(next);
        Serial.print("Previous node: ");
        //Serial.println(previous);
            return;
        }
  switch (CurrentOrientation) {
            case EAST:
                if (moveDirection == 1) { forward();}
                else if (moveDirection == 3) { perform90L(); }
                else if (moveDirection == 0) { perform90R(); }
                else if (moveDirection == 2) { perform180(); }
                //if (next == 5){Park();}
                break;

            case SOUTH:
                if (moveDirection == 0) { forward();}
                else if (moveDirection == 1) { perform90L(); }
                else if (moveDirection == 2) { perform90R(); }
                else if (moveDirection == 3) { perform180(); }
                //if (next == 5){Park();}
                break;

            case WEST:
                if (moveDirection == 2) { forward();}
                else if (moveDirection == 0) { perform90L(); }
                else if (moveDirection == 3) { perform90R(); }
                else if (moveDirection == 1) { perform180(); }
                //if (next == 5){Park();}
                break;

            case NORTH:
                if (moveDirection == 3) { forward(); }
                else if (moveDirection == 2) { perform90L(); }
                else if (moveDirection == 1) { perform90R(); }
                else if (moveDirection == 0) { perform180(); }
                //if (current == 5){Park();}
                break;
        }

}
bool isNodeBlocked() {
    const int requiredReadings = 5; // Number of consecutive readings required
    static int consecutiveReadings2 = 0; // Counter for consecutive readings

    // Read the parking sensor value

    Parking_val = analogRead(parkingsensor);

    // Check if the parking sensor value exceeds the obstacle threshold
    if (Parking_val >= Obstacle_thresh) {
        consecutiveReadings2++; // Increment counter for valid readings
        if (consecutiveReadings2 >= requiredReadings) {
            // If the required number of consecutive readings is met, the node is blocked
            halt(); // Stop the car
            //perform180(); // Perform a 180-degree turn
            //forward(); // Move forward after turning
            consecutiveReadings2 = 0; // Reset the counter
            return true; // Node is blocked
        }
    } else {
        // Reset the counter if the condition isn't met
        consecutiveReadings2 = 0;
    }

    // If the node is not blocked, continue checking sensors and adjusting movement
    check_sensors();
    //Adjustment(); // Continue moving forward
    return false; // Node is not blocked
  }
  // Dijkstra's Algorithm
void dijkstra(int graph[MAX][MAX], int start, int end, int path[], int &pathSize) {
    int dist[MAX];
    bool visited[MAX] = {false};
    int parent[MAX];
    
    for (int i = 0; i < MAX; i++) {
        dist[i] = INF;
        parent[i] = -1;
    }
    dist[start] = 0;

    for (int count = 0; count < MAX - 1; count++) {
        int u = findMinDistance(dist, visited, MAX);
        visited[u] = true;

        for (int v = 0; v < MAX; v++) {
            if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }
    pathSize = 0;
    constructPath(parent, end, path, pathSize);
}
// Function to construct the shortest path recursively
void constructPath(int parent[], int target, int path[], int &pathSize) {
    if (parent[target] == -1) {
        path[pathSize++] = target;
        return;
    }
    constructPath(parent, parent[target], path, pathSize);
    path[pathSize++] = target;
}
// Function to find the node with the smallest distance
int findMinDistance(int dist[], bool visited[], int n) {
    int min = INF, min_index = -1;
    for (int i = 0; i < n; i++) {
        if (!visited[i] && dist[i] <= min) {
            min = dist[i];
            min_index = i;
        }
    }
    return min_index;
}
void reverse() {
  analogWrite(Motor2_Ph, 255);
  analogWrite(Motor1_Ph, 255);
  analogWrite(Motor1_Pwm, default_speed);
  analogWrite(Motor2_Pwm, default_speed);
 




}
void forward() {
  //Serial.printf("\n%d forwards",__LINE__);
  analogWrite(Motor1_Ph, 0);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, default_speed);
  analogWrite(Motor2_Pwm, default_speed-5);
  return;
}
void left() {
  analogWrite(Motor1_Ph, 0);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, default_speed);
  analogWrite(Motor2_Pwm, turning_speed);
}
void tight_left(){
  analogWrite(Motor1_Ph, 0);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, 60);
  analogWrite(Motor2_Pwm, turning_tight_speed);
}
void right(){
  digitalWrite(Motor1_Ph,0);
  digitalWrite(Motor2_Ph,0);
  analogWrite(Motor1_Pwm, turning_speed);
  analogWrite(Motor2_Pwm, default_speed);
}
void tight_right(){
  analogWrite(Motor1_Ph,0);
  analogWrite(Motor2_Ph,0);
  analogWrite(Motor1_Pwm, turning_tight_speed);
  analogWrite(Motor2_Pwm, 50);
}
void halt() {
  analogWrite(Motor1_Ph, 0);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, 0);
  analogWrite(Motor2_Pwm, 0);
}
void perform180(){
  Serial.printf("\n%d Turn 180",__LINE__);
  halt();
  analogWrite(Motor1_Pwm, 0);
  analogWrite(Motor2_Pwm, 0);
  delay(5);
  analogWrite(Motor1_Ph, 255);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, 255);
  analogWrite(Motor2_Pwm, 255);
  delay(600);
  halt();
  forward();
  delay(200);
}
void perform90R(){
  Serial.printf("\n%d Turn right",__LINE__);
  forward();
  delay(200);
  analogWrite(Motor1_Pwm, 0);
  analogWrite(Motor2_Pwm, 0);
  analogWrite(Motor1_Ph, 0);
  analogWrite(Motor2_Ph, 255);
  analogWrite(Motor1_Pwm, 255);
  analogWrite(Motor2_Pwm, 255);
  delay(300);
 


}
void perform90L(){
  Serial.printf("\n%d Turn left",__LINE__);
  forward();
  delay(200);
  analogWrite(Motor1_Pwm, 0);
  analogWrite(Motor2_Pwm, 0);
  analogWrite(Motor1_Ph, 255);
  analogWrite(Motor2_Ph, 0);
  analogWrite(Motor1_Pwm, 255);
  analogWrite(Motor2_Pwm, 255);
  delay(300);
}
